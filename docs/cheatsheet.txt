Comillas simples o dobles
Javascript --> comillas simples --> '
HTML --> comillas dobles --> "

En los modelos nombramos las variables en camelcase (por ejemplo customerCarePhoneId) y en el html sin embargo la variable que contiene ese valor estará en minúsculas separada con guiones (customer_care_phone_id)

Lanzar errores: 
	throw new Meteor.Error("phone-validation-error","Falló la validación del tfno "+phone,phone.getValidationErrors());

Para sacar el audit_trail en las views: 
{{#if userIsAdmin}}
<div class='well'>
	Created by {{username createdBy}} at {{localizedDateAndTime createdAt}}  -  Updated by {{username updatedBy}} at {{localizedDateAndTime updatedAt}}
</div>	
{{/if}}


Las operaciones de cara al usuario son: view, view_embedable, add, modify, remove, sear

Cada Objeto tendrá más o menos las siguientes templates: 
- vista del objeto --> 'objeto_view'   --> la vista empotrable con pocos datos es la misma template a la que se le pasa embed=true en el objeto
- form para create/update --> 'objeto_form'
- dialogo de si estamos seguros de borrar --> 'objeto_remove'
- search --> 'objeto_search'
- search_result --> 'objeto_search_result'
- select --> 'objeto_select'
- select item --> 'objeto_select_option'
- list --> 'objeto_list'
- list row --> 'objeto_list_row'


Navegación:   
navigation.push('/admin/brand/view/'+this.params._id);  --> esto hay que meterlo en cada Route al ppio para que quede bien registrada la navegación

Validaciones --> poner siempre al menos el maxLength
	validators: {
		name: [
			Validators.required(),
			Validators.string(),
			Validators.minLength(3, 'At least 3 character!'),
			Validators.maxLength(20, 'At most 20 character!'),
		],
		amount: [
			Validators.required(),
			Validators.number(),		
			Validators.gte(0),
		]		